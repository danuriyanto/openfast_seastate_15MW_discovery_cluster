function writeElastoDyn_v412(ElastoDyn)
C(1,1) = {['------- ELASTODYN v1.03.* INPUT FILE -------------------------------------------']};
C(end+1,1) = {['IEA           MW            - offshore reference model with monopile']};
C(end+1,1) = {['---------------------- SIMULATION CONTROL --------------------------------------']};
C(end+1,1) = {['True         Echo          - Echo input data to "<RootName>.ech" (flag)']};
C(end+1,1) = {['3             Method        - Integration method: {1: RK4, 2: AB4, or 3: ABM4} (-)']};
C(end+1,1) = {['default     DT            - Integration time step (s)']};
C(end+1,1) = {['---------------------- DEGREES OF FREEDOM --------------------------------------']};
C(end+1,1) = {['True          FlapDOF1      - First flapwise blade mode DOF (flag)']};
C(end+1,1) = {['True          FlapDOF2      - Second flapwise blade mode DOF (flag)']};
C(end+1,1) = {['True          EdgeDOF       - First edgewise blade mode DOF (flag)']};
C(end+1,1) = {['False         TeetDOF       - Rotor-teeter DOF (flag) [unused for 3 blades]']};
C(end+1,1) = {['False         DrTrDOF       - Drivetrain rotational-flexibility DOF (flag)']};
C(end+1,1) = {[ElastoDyn.GenDOF '          GenDOF        - Generator DOF (flag)']};
C(end+1,1) = {['False         YawDOF        - Yaw DOF (flag)']};
C(end+1,1) = {['True          TwFADOF1      - First fore-aft tower bending-mode DOF (flag)']};
C(end+1,1) = {['True          TwFADOF2      - Second fore-aft tower bending-mode DOF (flag)']};
C(end+1,1) = {['True          TwSSDOF1      - First side-to-side tower bending-mode DOF (flag)']};
C(end+1,1) = {['True          TwSSDOF2      - Second side-to-side tower bending-mode DOF (flag)']};
C(end+1,1) = {['True          PtfmSgDOF     - Platform horizontal surge translation DOF (flag)']};
C(end+1,1) = {['True          PtfmSwDOF     - Platform horizontal sway translation DOF (flag)']};
C(end+1,1) = {['True          PtfmHvDOF     - Platform vertical heave translation DOF (flag)']};
C(end+1,1) = {['True          PtfmRDOF      - Platform roll tilt rotation DOF (flag)']};
C(end+1,1) = {['True          PtfmPDOF      - Platform pitch tilt rotation DOF (flag)']};
C(end+1,1) = {['True          PtfmYDOF      - Platform yaw rotation DOF (flag)']};
C(end+1,1) = {['---------------------- INITIAL CONDITIONS --------------------------------------']};
C(end+1,1) = {['0.0           OoPDefl       - Initial out-of-plane blade-tip displacement (meters)']};
C(end+1,1) = {['0.0           IPDefl        - Initial in-plane blade-tip deflection (meters)']};
C(end+1,1) = {[num2str(ElastoDyn.BlPitch) '             BlPitch(1)    - Blade 1 initial pitch (degrees)']};
C(end+1,1) = {[num2str(ElastoDyn.BlPitch) '             BlPitch(2)    - Blade 2 initial pitch (degrees)']};
C(end+1,1) = {[num2str(ElastoDyn.BlPitch) '             BlPitch(3)    - Blade 3 initial pitch (degrees) [unused for 2 blades]']};
C(end+1,1) = {['0.0           TeetDefl      - Initial or fixed teeter angle (degrees) [unused for 3 blades]']};
C(end+1,1) = {[num2str(ElastoDyn.Azimuth) '           Azimuth       - Initial azimuth angle for blade 1 (degrees)']};
C(end+1,1) = {[num2str(ElastoDyn.RotSpeed) '            RotSpeed      - Initial or fixed rotor speed (rpm)']};
C(end+1,1) = {[num2str(ElastoDyn.NacYaw) '0             NacYaw        - Initial or fixed nacelle-yaw angle (degrees)']};
C(end+1,1) = {['0.0           TTDspFA       - Initial fore-aft tower-top displacement (meters)']};
C(end+1,1) = {['0.0           TTDspSS       - Initial side-to-side tower-top displacement (meters)']};
C(end+1,1) = {['0.0           PtfmSurge     - Initial or fixed horizontal surge translational displacement of platform (meters)']};
C(end+1,1) = {['0             PtfmSway      - Initial or fixed horizontal sway translational displacement of platform (meters)']};
C(end+1,1) = {['0             PtfmHeave     - Initial or fixed vertical heave translational displacement of platform (meters)']};
C(end+1,1) = {['0             PtfmRoll      - Initial or fixed roll tilt rotational displacement of platform (degrees)']};
C(end+1,1) = {['0             PtfmPitch     - Initial or fixed pitch tilt rotational displacement of platform (degrees)']};
C(end+1,1) = {['0             PtfmYaw       - Initial or fixed yaw rotational displacement of platform (degrees)']};
C(end+1,1) = {['---------------------- TURBINE CONFIGURATION -----------------------------------']};
C(end+1,1) = {['3             NumBl         - Number of blades (-)']};
C(end+1,1) = {['120.97        TipRad        - The distance from the rotor apex to the blade tip (meters)']};
C(end+1,1) = {['3.97          HubRad        - The distance from the rotor apex to the blade root (meters)']};
C(end+1,1) = {['-4.0          PreCone(1)    - Blade 1 cone angle (degrees)']};
C(end+1,1) = {['-4.0          PreCone(2)    - Blade 2 cone angle (degrees)']};
C(end+1,1) = {['-4.0          PreCone(3)    - Blade 3 cone angle (degrees) [unused for 2 blades]']};
C(end+1,1) = {['0.0           HubCM         - Distance from rotor apex to hub mass [positive downwind] (meters)']};
C(end+1,1) = {['0.0           UndSling      - Undersling length [distance from teeter pin to the rotor apex] (meters) [unused for 3 blades]']};
C(end+1,1) = {['0.0           Delta3        - Delta-3 angle for teetering rotors (degrees) [unused for 3 blades]']};
C(end+1,1) = {['0.0           AzimB1Up      - Azimuth value to use for I/O when blade 1 points up (degrees)']};
C(end+1,1) = {['-12.097571763912535 OverHang      - Distance from yaw axis to rotor apex [3 blades] or teeter pin [2 blades] (meters)']};
C(end+1,1) = {['0.0           ShftGagL      - Distance from rotor apex [3 blades] or teeter pin [2 blades] to shaft strain gages [positive for upwind rotors] (meters)']};
C(end+1,1) = {['-6.0          ShftTilt      - Rotor shaft tilt angle (degrees)']};
C(end+1,1) = {['-4.72         NacCMxn       - Downwind distance from the tower-top to the nacelle CM (meters)']};
C(end+1,1) = {['0.0           NacCMyn       - Lateral distance from the tower-top to the nacelle CM (meters)']};
C(end+1,1) = {['4.275         NacCMzn       - Vertical distance from the tower-top to the nacelle CM (meters)']};
C(end+1,1) = {['0.0           NcIMUxn       - Downwind distance from the tower-top to the nacelle IMU (meters)']};
C(end+1,1) = {['0.0           NcIMUyn       - Lateral distance from the tower-top to the nacelle IMU (meters)']};
C(end+1,1) = {['0.0           NcIMUzn       - Vertical distance from the tower-top to the nacelle IMU (meters)']};
C(end+1,1) = {['4.349459414248071 Twr2Shft      - Vertical distance from the tower-top to the rotor shaft (meters)']};
C(end+1,1) = {['144.386       TowerHt       - Height of tower above ground level [onshore] or MSL [offshore] (meters)']};
C(end+1,1) = {[num2str(ElastoDyn.InterfaceElevation) '          TowerBsHt     - Height of tower base above ground level [onshore] or MSL [offshore] (meters)']};
C(end+1,1) = {['0.0           PtfmCMxt      - Downwind distance from the ground level [onshore] or MSL [offshore] to the platform CM (meters)']};
C(end+1,1) = {['0.0           PtfmCMyt      - Lateral distance from the ground level [onshore] or MSL [offshore] to the platform CM (meters)']};
C(end+1,1) = {[num2str(ElastoDyn.InterfaceElevation) '          PtfmCMzt      - Vertical distance from the ground level [onshore] or MSL [offshore] to the platform CM (meters)']};
C(end+1,1) = {[num2str(ElastoDyn.InterfaceElevation) '          PtfmRefzt     - Vertical distance from the ground level [onshore] or MSL [offshore] to the platform reference point (meters)']};
C(end+1,1) = {['---------------------- MASS AND INERTIA ----------------------------------------']};
C(end+1,1) = {['0.0           TipMass(1)    - Tip-brake mass, blade 1 (kg)']};
C(end+1,1) = {['0.0           TipMass(2)    - Tip-brake mass, blade 2 (kg)']};
C(end+1,1) = {['0.0           TipMass(3)    - Tip-brake mass, blade 3 (kg) [unused for 2 blades]']};
C(end+1,1) = {['69360         HubMass       - Hub mass (kg)']};
C(end+1,1) = {['973520        HubIner       - Hub inertia about rotor axis [3 blades] or teeter axis [2 blades] (kg m^2)']};
C(end+1,1) = {['1836784       GenIner       - Generator inertia about HSS (kg m^2)']};
C(end+1,1) = {['646895        NacMass       - Nacelle mass (kg)']};
C(end+1,1) = {['24240914      NacYIner      - Nacelle inertia about yaw axis (kg m^2)']};
C(end+1,1) = {['28280         YawBrMass     - Yaw bearing mass (kg)']};
C(end+1,1) = {['0.0           PtfmMass      - Platform mass (kg)']};
C(end+1,1) = {['0.0           PtfmRIner     - Platform inertia for roll tilt rotation about the platform CM (kg m^2)']};
C(end+1,1) = {['0.0           PtfmPIner     - Platform inertia for pitch tilt rotation about the platform CM (kg m^2)']};
C(end+1,1) = {['100000000.0   PtfmYIner     - Platform inertia for yaw rotation about the platform CM (kg m^2)']};
C(end+1,1) = {['0.0           PtfmXYIner  - Platform xy moment of inertia about the platform CM (=-int(xydm)) (kg m^2)']};
C(end+1,1) = {['0.0           PtfmYZIner  - Platform yz moment of inertia about the platform CM (=-int(yzdm)) (kg m^2)']};
C(end+1,1) = {['0.0           PtfmXZIner  - Platform xz moment of inertia about the platform CM (=-int(xzdm)) (kg m^2)']};
C(end+1,1) = {['---------------------- BLADE ---------------------------------------------------']};
C(end+1,1) = {['50            BldNodes      - Number of blade nodes (per blade) used for analysis (-)']};
C(end+1,1) = {['"IEA-15-240-RWT/IEA-15-240-RWT_ElastoDyn_blade.dat" BldFile1      - Name of file containing properties for blade 1 (quoted string)']};
C(end+1,1) = {['"IEA-15-240-RWT/IEA-15-240-RWT_ElastoDyn_blade.dat" BldFile2      - Name of file containing properties for blade 2 (quoted string)']};
C(end+1,1) = {['"IEA-15-240-RWT/IEA-15-240-RWT_ElastoDyn_blade.dat" BldFile3      - Name of file containing properties for blade 3 (quoted string) [unused for 2 blades]']};
C(end+1,1) = {['---------------------- ROTOR-TEETER --------------------------------------------']};
C(end+1,1) = {['0             TeetMod       - Rotor-teeter spring/damper model {0: none, 1: standard, 2: user-defined from routine UserTeet} (switch) [unused for 3 blades]']};
C(end+1,1) = {['0.0           TeetDmpP      - Rotor-teeter damper position (degrees) [used only for 2 blades and when TeetMod=1]']};
C(end+1,1) = {['0.0           TeetDmp       - Rotor-teeter damping constant (N-m/(rad/s)) [used only for 2 blades and when TeetMod=1]']};
C(end+1,1) = {['0.0           TeetCDmp      - Rotor-teeter rate-independent Coulomb-damping moment (N-m) [used only for 2 blades and when TeetMod=1]']};
C(end+1,1) = {['0.0           TeetSStP      - Rotor-teeter soft-stop position (degrees) [used only for 2 blades and when TeetMod=1]']};
C(end+1,1) = {['0.0           TeetHStP      - Rotor-teeter hard-stop position (degrees) [used only for 2 blades and when TeetMod=1]']};
C(end+1,1) = {['0.0           TeetSSSp      - Rotor-teeter soft-stop linear-spring constant (N-m/rad) [used only for 2 blades and when TeetMod=1]']};
C(end+1,1) = {['0.0           TeetHSSp      - Rotor-teeter hard-stop linear-spring constant (N-m/rad) [used only for 2 blades and when TeetMod=1]']};
C(end+1,1) = {['---------------------- YAW-FRICTION --------------------------------------------']};
C(end+1,1) = {['          0   YawFrctMod  - Yaw-friction model {0: none, 1: friction independent of yaw-bearing force and bending moment, 2: friction with Coulomb terms depending on yaw-bearing force and bending moment, 3: user defined model} (switch)']};
C(end+1,1) = {['        300   M_CSmax     - Maximum static Coulomb friction torque (N-m) [M_CSmax when YawFrctMod=1; |Fz|*M_CSmax when YawFrctMod=2 and Fz<0]']};
C(end+1,1) = {['          0   M_FCSmax    - Maximum static Coulomb friction torque proportional to yaw bearing shear force (N-m) [sqrt(Fx^2+Fy^2)*M_FCSmax; only used when YawFrctMod=2]']};
C(end+1,1) = {['          0   M_MCSmax    - Maximum static Coulomb friction torque proportional to yaw bearing bending moment (N-m) [sqrt(Mx^2+My^2)*M_MCSmax; only used when YawFrctMod=2]']};
C(end+1,1) = {['         40   M_CD        - Dynamic Coulomb friction moment (N-m) [M_CD when YawFrctMod=1; |Fz|*M_CD when YawFrctMod=2 and Fz<0]']};
C(end+1,1) = {['          0   M_FCD       - Dynamic Coulomb friction moment proportional to yaw bearing shear force (N-m) [sqrt(Fx^2+Fy^2)*M_FCD; only used when YawFrctMod=2]']};
C(end+1,1) = {['          0   M_MCD       - Dynamic Coulomb friction moment proportional to yaw bearing bending moment (N-m) [sqrt(Mx^2+My^2)*M_MCD; only used when YawFrctMod=2]']};
C(end+1,1) = {['          0   sig_v       - Linear viscous friction coefficient (N-m/(rad/s))']};
C(end+1,1) = {['          0   sig_v2      - Quadratic viscous friction coefficient (N-m/(rad/s)^2)']};
C(end+1,1) = {['          0   OmgCut      - Yaw angular velocity cutoff below which viscous friction is linearized (rad/s)']};
C(end+1,1) = {['---------------------- DRIVETRAIN ----------------------------------------------']};
C(end+1,1) = {['100.0         GBoxEff       - Gearbox efficiency (%)']};
C(end+1,1) = {['1.0           GBRatio       - Gearbox ratio (-)']};
C(end+1,1) = {['51140939610.0 DTTorSpr      - Drivetrain torsional spring (N-m/rad)']};
C(end+1,1) = {['42676833.0    DTTorDmp      - Drivetrain torsional damper (N-m/(rad/s))']};
C(end+1,1) = {['---------------------- FURLING -------------------------------------------------']};
C(end+1,1) = {['False         Furling       - Read in additional model properties for furling turbine (flag) [must currently be FALSE)']};
C(end+1,1) = {['unused      FurlFile      - Name of file containing furling properties (quoted string) [unused when Furling=False]']};
C(end+1,1) = {['---------------------- TOWER ---------------------------------------------------']};
C(end+1,1) = {['20            TwrNodes      - Number of tower nodes used for analysis (-)']};
C(end+1,1) = {['"IEA-15-240-RWT/IEA-15-240-RWT-Monopile_ElastoDyn_tower.dat" TwrFile       - Name of file containing tower properties (quoted string)']};
C(end+1,1) = {['---------------------- OUTPUT --------------------------------------------------']};
C(end+1,1) = {['False         SumPrint      - Print summary data to "<RootName>.sum" (flag)']};
C(end+1,1) = {['2             OutFile       - Switch to determine where output will be placed: {1: in module output file only; 2: in glue code output file only; 3: both} (currently unused)']};
C(end+1,1) = {['True          TabDelim      - Use tab delimiters in text tabular output file? (flag) (currently unused)']};
C(end+1,1) = {['ES10.3E2      OutFmt        - Format used for text tabular output (except time). Resulting field should be 10 characters. (quoted string) (currently unused)']};
C(end+1,1) = {['0.0           TStart        - Time to begin tabular output (s) (currently unused)']};
C(end+1,1) = {['1             DecFact       - Decimation factor for tabular output {1: output every time step} (-) (currently unused)']};
C(end+1,1) = {['0             NTwGages      - Number of tower nodes that have strain gages for output [0 to 9] (-)']};
C(end+1,1) = {['0             TwrGagNd      - List of tower nodes that have strain gages [1 to TwrNodes] (-) [unused if NTwGages=0] TwrGagNd - List of tower nodes that have strain gages [1 to TwrNodes] (-) [unused if NTwGages=0] TwrGagNd - List of tower nodes that have strain gages [1 to TwrNodes] (-) [unused if NTwGages=0]']};
C(end+1,1) = {['0             NBlGages      - Number of blade nodes that have strain gages for output [0 to 9] (-)']};
C(end+1,1) = {['0             BldGagNd      - List of blade nodes that have strain gages [1 to BldNodes] (-) [unused if NBlGages=0] BldGagNd - List of blade nodes that have strain gages [1 to BldNodes] (-) [unused if NBlGages=0] BldGagNd - List of blade nodes that have strain gages [1 to BldNodes] (-) [unused if NBlGages=0]']};
C(end+1,1) = {['OutList The next line(s) contains a list of output parameters.  See OutListParameters.xlsx for a listing of available output channels, (-)']};
C(end+1,1) = {['Azimuth']};
C(end+1,1) = {['BldPitch1']};
C(end+1,1) = {['BldPitch2']};
C(end+1,1) = {['BldPitch3']};
C(end+1,1) = {['GenSpeed']};
C(end+1,1) = {['IPDefl1']};
C(end+1,1) = {['LSSGagMya']};
C(end+1,1) = {['LSSGagMza']};
C(end+1,1) = {['LSSTipMys']};
C(end+1,1) = {['LSSTipMzs']};
C(end+1,1) = {['LSShftFys']};
C(end+1,1) = {['LSShftFzs']};
C(end+1,1) = {['NacYaw']};
C(end+1,1) = {['NcIMUTAxs']};
C(end+1,1) = {['NcIMUTAys']};
C(end+1,1) = {['NcIMUTAzs']};
C(end+1,1) = {['OoPDefl1']};
C(end+1,1) = {['PtfmHeave']};
C(end+1,1) = {['PtfmPitch']};
C(end+1,1) = {['PtfmRoll']};
C(end+1,1) = {['PtfmSurge']};
C(end+1,1) = {['PtfmSway']};
C(end+1,1) = {['PtfmYaw']};
C(end+1,1) = {['RootFxb1']};
C(end+1,1) = {['RootFxb2']};
C(end+1,1) = {['RootFxb3']};
C(end+1,1) = {['RootFxc1']};
C(end+1,1) = {['RootFxc2']};
C(end+1,1) = {['RootFxc3']};
C(end+1,1) = {['RootFyb1']};
C(end+1,1) = {['RootFyb2']};
C(end+1,1) = {['RootFyb3']};
C(end+1,1) = {['RootFyc1']};
C(end+1,1) = {['RootFyc2']};
C(end+1,1) = {['RootFyc3']};
C(end+1,1) = {['RootFzb1']};
C(end+1,1) = {['RootFzb2']};
C(end+1,1) = {['RootFzb3']};
C(end+1,1) = {['RootFzc1']};
C(end+1,1) = {['RootFzc2']};
C(end+1,1) = {['RootFzc3']};
C(end+1,1) = {['RootMxb1']};
C(end+1,1) = {['RootMxb2']};
C(end+1,1) = {['RootMxb3']};
C(end+1,1) = {['RootMxc1']};
C(end+1,1) = {['RootMxc2']};
C(end+1,1) = {['RootMxc3']};
C(end+1,1) = {['RootMyb1']};
C(end+1,1) = {['RootMyb2']};
C(end+1,1) = {['RootMyb3']};
C(end+1,1) = {['RootMyc1']};
C(end+1,1) = {['RootMyc2']};
C(end+1,1) = {['RootMyc3']};
C(end+1,1) = {['RootMzb1']};
C(end+1,1) = {['RootMzb2']};
C(end+1,1) = {['RootMzb3']};
C(end+1,1) = {['RootMzc1']};
C(end+1,1) = {['RootMzc2']};
C(end+1,1) = {['RootMzc3']};
C(end+1,1) = {['RotSpeed']};
C(end+1,1) = {['RotThrust']};
C(end+1,1) = {['RotTorq']};
C(end+1,1) = {['Spn1MLxb1']};
C(end+1,1) = {['Spn1MLyb1']};
C(end+1,1) = {['Spn2MLxb1']};
C(end+1,1) = {['Spn2MLyb1']};
C(end+1,1) = {['Spn3MLxb1']};
C(end+1,1) = {['Spn3MLyb1']};
C(end+1,1) = {['Spn4MLxb1']};
C(end+1,1) = {['Spn4MLyb1']};
C(end+1,1) = {['Spn5MLxb1']};
C(end+1,1) = {['Spn5MLyb1']};
C(end+1,1) = {['Spn6MLxb1']};
C(end+1,1) = {['Spn6MLyb1']};
C(end+1,1) = {['Spn7MLxb1']};
C(end+1,1) = {['Spn7MLyb1']};
C(end+1,1) = {['Spn8MLxb1']};
C(end+1,1) = {['Spn8MLyb1']};
C(end+1,1) = {['Spn9MLxb1']};
C(end+1,1) = {['Spn9MLyb1']};
C(end+1,1) = {['TTDspTwst']};
C(end+1,1) = {['TipDxb1']};
C(end+1,1) = {['TipDxb2']};
C(end+1,1) = {['TipDxb3']};
C(end+1,1) = {['TipDxc1']};
C(end+1,1) = {['TipDxc2']};
C(end+1,1) = {['TipDxc3']};
C(end+1,1) = {['TipDyb1']};
C(end+1,1) = {['TipDyb2']};
C(end+1,1) = {['TipDyb3']};
C(end+1,1) = {['TipDyc1']};
C(end+1,1) = {['TipDyc2']};
C(end+1,1) = {['TipDyc3']};
C(end+1,1) = {['TipDzb1']};
C(end+1,1) = {['TipDzb2']};
C(end+1,1) = {['TipDzb3']};
C(end+1,1) = {['TipDzc1']};
C(end+1,1) = {['TipDzc2']};
C(end+1,1) = {['TipDzc3']};
C(end+1,1) = {['TwHt1TPxi']};
C(end+1,1) = {['TwHt1TPyi']};
C(end+1,1) = {['TwrBsFxt']};
C(end+1,1) = {['TwrBsFyt']};
C(end+1,1) = {['TwrBsFzt']};
C(end+1,1) = {['TwrBsMxt']};
C(end+1,1) = {['TwrBsMyt']};
C(end+1,1) = {['TwrBsMzt']};
C(end+1,1) = {['TwstDefl1']};
C(end+1,1) = {['YawBrFxp']};
C(end+1,1) = {['YawBrFyp']};
C(end+1,1) = {['YawBrFzp']};
C(end+1,1) = {['YawBrMxp']};
C(end+1,1) = {['YawBrMyp']};
C(end+1,1) = {['YawBrMzp']};
C(end+1,1) = {['YawBrTDxt']};
C(end+1,1) = {['YawBrTDyt']};
C(end+1,1) = {['YawBrTDxp']};
C(end+1,1) = {['YawBrTDyp']};
C(end+1,1) = {['YawBrTDzp']};
C(end+1,1) = {['END']};
C(end+1,1) = {['---------------------- NODE OUTPUTS --------------------------------------------']};
C(end+1,1) = {['0             BldNd_BladesOut - Blades to output']};
C(end+1,1) = {['99            BldNd_BlOutNd - Blade nodes on each blade (currently unused)']};
C(end+1,1) = {['OutList_Nodal The next line(s) contains a list of output parameters.  See OutListParameters.xlsx, ElastoDyn_Nodes tab for a listing of available output channels, (-)']};
C(end+1,1) = {['END']};
C(end+1,1) = {['---------------------------------------------------------------------------------------']};
writecell(C,ElastoDyn.FileName,QuoteStrings="none",FileType="text",WriteMode="overwrite");
end